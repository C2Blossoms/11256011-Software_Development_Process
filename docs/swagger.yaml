basePath: /
definitions:
  main.Book:
    properties:
      author:
        type: string
      id:
        type: integer
      title:
        type: string
    type: object
host: localhost:8080
info:
  contact: {}
  description: This is a sample server for a book API.
  title: Book API
  version: "2.0"
paths:
  /books:
    get:
      consumes:
      - application/json
      description: Get details of all books
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/main.Book'
            type: array
      security:
      - BearerAuth: []
      summary: Get all books
      tags:
      - books
    post:
      consumes:
      - application/json
      description: Create a new book
      parameters:
      - description: Book info
        in: body
        name: book
        required: true
        schema:
          $ref: '#/definitions/main.Book'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/main.Book'
        "400":
          description: Bad Request
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: Post new book
      tags:
      - books
  /books/{id}:
    delete:
      consumes:
      - application/json
      description: Delete detail of a book by ID
      parameters:
      - description: Book ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "204":
          description: StatusNoContent
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            type: string
        "404":
          description: Not Found
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: Delete all details of a book
      tags:
      - books
    get:
      description: Get book details by ID
      parameters:
      - description: Book ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/main.Book'
        "400":
          description: Bad Request
          schema:
            type: string
        "404":
          description: Not Found
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: Get a book by ID
      tags:
      - books
    put:
      consumes:
      - application/json
      description: Update detail of a book by ID
      parameters:
      - description: Book ID
        in: path
        name: id
        required: true
        type: integer
      - description: Update book info
        in: body
        name: book
        required: true
        schema:
          $ref: '#/definitions/main.Book'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/main.Book'
        "400":
          description: Bad Request
          schema:
            type: string
        "404":
          description: Not Found
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: Update detail of a book
      tags:
      - books
schemes:
- http
securityDefinitions:
  BearerAuth:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
